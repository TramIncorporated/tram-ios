//
//  MovieDetailsViewController.swift
//  Tram
//
//  Created by Roman Abuzyarov on 06.01.2018.
//  Copyright (c) 2018 Roman Abuzyarov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailsDisplayLogic: class
{
    func displayFilling(viewModel: MovieDetails.FillData.ViewModel)
    func displayCrew(viewModel: MovieDetails.LoadPeople.ViewModel)
    func displayCast(viewModel: MovieDetails.LoadPeople.ViewModel)
    func displayWatchlistStatus(viewModel: MovieDetails.Watchlist.ViewModel)
}

class MovieDetailsViewController: UIViewController
{
    
    @IBOutlet weak var collectionView: UICollectionView!
    var interactor: MovieDetailsBusinessLogic?
    var router: (NSObjectProtocol & MovieDetailsRoutingLogic & MovieDetailsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MovieDetailsInteractor()
        let presenter = MovieDetailsPresenter()
        let router = MovieDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.collectionView.register(UINib(nibName: "DetailCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "detailCell")
        self.collectionView.register(UINib(nibName: "PeopleCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "peopleCell")
        self.collectionView.register(UINib(nibName: "PlotCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "plotCell")
        self.collectionView.register(UINib(nibName: "TitleCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "titleCell")
        if let flowLayout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            flowLayout.estimatedItemSize = CGSize(width: 1, height: 1)
        }
        fillData()
        loadCast()
        loadCrew()
    }
    
    @objc func topButtonPressed(_ sender: Any) {
        let request = MovieDetails.Watchlist.Request(action: .Change)
        interactor?.watchlist(request: request)
    }
    @objc func bottomButtonPressed(_ sender: Any) {
    }
    
    // Use cases
    func determineWatchlistStatus(){
        let request = MovieDetails.Watchlist.Request(action: .RequestStatus)
        interactor?.watchlist(request: request)
    }
    
    func fillData()
    {
        let request = MovieDetails.FillData.Request()
        interactor?.fillData(request: request)
    }
    
    func loadCrew(){
        let request = MovieDetails.LoadPeople.Request(type: .Crew)
        interactor?.loadPeople(request: request)
    }
    
    func loadCast(){
        let request = MovieDetails.LoadPeople.Request(type: .Cast)
        interactor?.loadPeople(request: request)
    }
    
    var generalDataStore : MovieDetails.FillData.ViewModel?
    
    var titleCell : TitleCollectionViewCell?
    var castCell: PeopleCollectionViewCell?
    var crewCell: PeopleCollectionViewCell?
    var plotCell: PlotCollectionViewCell?
}

extension MovieDetailsViewController : MovieDetailsDisplayLogic {
    func displayWatchlistStatus(viewModel: MovieDetails.Watchlist.ViewModel) {
        switch viewModel.status {
        case .In:
            titleCell?.topButton.setTitle("Remove from watchlist", for: .normal)
        case .Out:
            titleCell?.topButton.setTitle("Add to watchlist", for: .normal)
        }
    }
    
    func displayFilling(viewModel: MovieDetails.FillData.ViewModel)
    {
        self.generalDataStore = viewModel
        collectionView.reloadData()
    }
    func displayCrew(viewModel: MovieDetails.LoadPeople.ViewModel) {
        crewCell?.people = viewModel.people
    }
    
    func displayCast(viewModel: MovieDetails.LoadPeople.ViewModel) {
        castCell?.people = viewModel.people
    }
}

extension MovieDetailsViewController : UICollectionViewDelegate, UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 4
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        switch indexPath.row {
        case 0:
            let titleCell = collectionView.dequeueReusableCell(withReuseIdentifier: "titleCell", for: indexPath) as! TitleCollectionViewCell
            
            titleCell.topButton.addTarget(self, action: #selector(self.topButtonPressed(_:)), for: .touchUpInside)
            titleCell.bottomButton.addTarget(self, action: #selector(self.bottomButtonPressed(_:)), for: .touchUpInside)
            
            if let viewModel = generalDataStore {
                titleCell.titleLabel.text = viewModel.title
                titleCell.yearLabel.text = viewModel.year
                titleCell.lengthLabel.text = viewModel.length
                titleCell.heartLabel.text = viewModel.heartRating
                titleCell.starLabel.text = viewModel.starRating
                if let imageUrl = viewModel.imageUrl {
                    titleCell.imageView.setImageInBackground(url: URL(string: imageUrl))
                }
            }
            self.titleCell = titleCell
            
            determineWatchlistStatus()
            
            return titleCell
            
        case 1:
            let plotCell = collectionView.dequeueReusableCell(withReuseIdentifier: "plotCell", for: indexPath) as! PlotCollectionViewCell
            
            if let viewModel = generalDataStore{
                plotCell.sectionTitleLabel.text = "Plot"
                plotCell.textView.text = viewModel.plot
            }
            
            self.plotCell = plotCell
            return plotCell
            
        case 2:
            let castCell = collectionView.dequeueReusableCell(withReuseIdentifier: "peopleCell", for: indexPath) as! PeopleCollectionViewCell
            
            castCell.sectionTitleLabel.text = "Cast"
            
            self.castCell = castCell
            return castCell
            
        case 3:
            let crewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "peopleCell", for: indexPath) as! PeopleCollectionViewCell
            
            crewCell.sectionTitleLabel.text = "Crew"
            
            self.crewCell = crewCell
            return crewCell
            
        default:
            return UICollectionViewCell()
        }
    }
    
}
