//
//  MovieDetailsViewController.swift
//  Tram
//
//  Created by Roman Abuzyarov on 06.01.2018.
//  Copyright (c) 2018 Roman Abuzyarov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailsDisplayLogic: class
{
    func displayFilling(viewModel: MovieDetails.FillData.ViewModel)
    func displayWatchlistStatus(viewModel: MovieDetails.List.ViewModel)
    func displayWatchedStatus(viewModel: MovieDetails.List.ViewModel)
}

class MovieDetailsViewController: UIViewController
{
    
    @IBOutlet weak var collectionView: UICollectionView!
    var interactor: MovieDetailsBusinessLogic?
    var router: (NSObjectProtocol & MovieDetailsRoutingLogic & MovieDetailsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MovieDetailsInteractor()
        let presenter = MovieDetailsPresenter()
        let router = MovieDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.collectionView.register(UINib(nibName: "DetailCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "detailCell")
        self.collectionView.register(UINib(nibName: "PeopleCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "peopleCell")
        self.collectionView.register(UINib(nibName: "PlotCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "plotCell")
        self.collectionView.register(UINib(nibName: "TitleCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "titleCell")
        if let flowLayout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            flowLayout.estimatedItemSize = CGSize(width: 1, height: 1)
        }
        fillData()
    }
    
    @objc func topButtonPressed(_ sender: Any) {
        let request = MovieDetails.List.Request(list: .Watchlist,action: .Change)
        interactor?.list(request: request)
    }
    @objc func bottomButtonPressed(_ sender: Any) {
        let request = MovieDetails.List.Request(list: .Watched, action: .Change)
        interactor?.list(request: request)
    }
    
    // Use cases
    func determineWatchlistStatus(){
        let request = MovieDetails.List.Request(list: .Watchlist, action: .RequestStatus)
        interactor?.list(request: request)
    }
    
    func determineWatchedStatus(){
        let request = MovieDetails.List.Request(list: .Watched, action: .RequestStatus)
        interactor?.list(request: request)
    }
    
    func fillData()
    {
        let request = MovieDetails.FillData.Request()
        interactor?.fillData(request: request)
    }
    
    var generalDataStore : MovieDetails.FillData.ViewModel?
    
    var titleCell : TitleCollectionViewCell?
    var castCell: PeopleCollectionViewCell?
    var crewCell: PeopleCollectionViewCell?
    var plotCell: PlotCollectionViewCell?
    
    var castCellIndex : Int{
        get{
            if (generalDataStore?.movie?.cast.count ?? 0) > 0{
                return 2
            }
            else{
                return -1
            }
        }
    }
    var crewCellIndex : Int{
        get{
            if (generalDataStore?.movie?.crew.count ?? 0) > 0{
                if castCellIndex > 0{
                    return castCellIndex + 1
                }
                else{
                    return 2
                }
            }
            else{
                return -1
            }
        }
    }
    
    var countOfTopCells: Int{
        get{
            return 2 + (castCellIndex > 0 ? 1 : 0) + (crewCellIndex > 0 ? 1 : 0)
        }
    }
}

extension MovieDetailsViewController : MovieDetailsDisplayLogic {
    func displayWatchedStatus(viewModel: MovieDetails.List.ViewModel) {
        if viewModel.status == .In{
            let request = MovieDetails.List.Request(list: .Watchlist, action: .Remove)
            interactor?.list(request: request)
        }
        switch viewModel.status {
        case .In:
            titleCell?.bottomButton.setTitle("Unwatched", for: .normal)
        case .Out:
            titleCell?.bottomButton.setTitle("Watched", for: .normal)
        }
    }
    
    func displayWatchlistStatus(viewModel: MovieDetails.List.ViewModel) {
        if viewModel.status == .In{
            let request = MovieDetails.List.Request(list: .Watched, action: .Remove)
            interactor?.list(request: request)
        }
        switch viewModel.status {
        case .In:
            titleCell?.topButton.setTitle("Remove from watchlist", for: .normal)
        case .Out:
            titleCell?.topButton.setTitle("Add to watchlist", for: .normal)
        }
    }
    
    func displayFilling(viewModel: MovieDetails.FillData.ViewModel)
    {
        self.generalDataStore = viewModel
        collectionView.reloadData()
    }
}

extension MovieDetailsViewController : UICollectionViewDelegate, UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return countOfTopCells + (generalDataStore?.movie?.details.count ?? 0)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        switch indexPath.row {
        case 0:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "titleCell", for: indexPath) as! TitleCollectionViewCell
            
            cell.topButton.addTarget(self, action: #selector(self.topButtonPressed(_:)), for: .touchUpInside)
            cell.bottomButton.addTarget(self, action: #selector(self.bottomButtonPressed(_:)), for: .touchUpInside)
            
            if let movie = generalDataStore?.movie {
                cell.fill(filler: movie)
            }
            self.titleCell = cell
            
            determineWatchlistStatus()
            determineWatchedStatus()
            
            return cell
            
        case 1:
            let plotCell = collectionView.dequeueReusableCell(withReuseIdentifier: "plotCell", for: indexPath) as! PlotCollectionViewCell
            
            if let movie = generalDataStore?.movie{
                plotCell.fill(filler: movie)
            }
            
            self.plotCell = plotCell
            return plotCell
            
        case castCellIndex:
            let castCell = collectionView.dequeueReusableCell(withReuseIdentifier: "peopleCell", for: indexPath) as! PeopleCollectionViewCell
            
            castCell.sectionTitleLabel.text = "Cast"
            
            if let movie = generalDataStore?.movie{
                castCell.people = movie.cast
            }
            
            self.castCell = castCell
            
            return castCell
            
        case crewCellIndex:
            let crewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "peopleCell", for: indexPath) as! PeopleCollectionViewCell
            
            crewCell.sectionTitleLabel.text = "Crew"
            
            if let movie = generalDataStore?.movie{
                crewCell.people = movie.crew
            }
            
            self.crewCell = crewCell
            return crewCell
            
        case countOfTopCells..<(countOfTopCells+(generalDataStore?.movie?.details.count ?? 0)):
            let detailCell = collectionView.dequeueReusableCell(withReuseIdentifier: "detailCell", for: indexPath) as! DetailCollectionViewCell
            if let details = generalDataStore?.movie?.details{
                detailCell.nameLabel.text = details[indexPath.row - countOfTopCells].0
                detailCell.valueLabel.text = details[indexPath.row - countOfTopCells].1
            }
            return detailCell // impossible case
            
        default:
            return UICollectionViewCell()
        }
    }
    
}
