//
//  TVShowDetailsViewController.swift
//  Tram
//
//  Created by Roman Abuzyarov on 19.03.2018.
//  Copyright (c) 2018 Tram, inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TVShowDetailsDisplayLogic: class
{
    func displayData(viewModel: TVShowDetails.DataFilling.ViewModel)
}

class TVShowDetailsViewController: UIViewController, TVShowDetailsDisplayLogic
{
    var interactor: TVShowDetailsBusinessLogic?
    var router: (NSObjectProtocol & TVShowDetailsRoutingLogic & TVShowDetailsDataPassing)?
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TVShowDetailsInteractor()
        let presenter = TVShowDetailsPresenter()
        let router = TVShowDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        self.collectionView.register(UINib(nibName: "SectionCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "sectionMEGACell")
        
        self.collectionView.register(UINib(nibName: "DetailCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "detailCell")
        self.collectionView.register(UINib(nibName: "PeopleCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "peopleCell")
        self.collectionView.register(UINib(nibName: "PlotCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "plotCell")
        self.collectionView.register(UINib(nibName: "TitleCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "titleCell")
        self.collectionView.register(UINib(nibName: "SubsectionCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "subsectionCell")
        self.collectionView.register(UINib(nibName: "EpisodeCell", bundle: nil), forCellWithReuseIdentifier: "episodeCell")
        
        if let flowLayout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {
            flowLayout.estimatedItemSize = CGSize(width: UIScreen.main.bounds.size.width-(8*2), height: 50)
        }
        
        requestData()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func requestData()
    {
        let request = TVShowDetails.DataFilling.Request()
        interactor?.requestData(request: request)
    }
    
    var show: TVShow?
    func displayData(viewModel: TVShowDetails.DataFilling.ViewModel)
    {
        show = viewModel.show
        
        var ar = [(Season, HideableDataSource<Episode>)]()
        for season in viewModel.show?.seasons ?? []{
            ar.append((season, HideableDataSource(items: season.episodes, hidden: true)))
        }
        seasonsAreaData = HideableDataSource(items: ar, hidden: true)
        collectionView.reloadData()
    }
    
    let seasonsAreaStartCell = 3
    var seasonsAreaData : HideableDataSource<(Season, HideableDataSource<Episode>)>?
    var seasonsAreaCount : Int{
        get{
            return (seasonsAreaData?.dataSource.count ?? 0) +
                (seasonsAreaData?.dataSource.reduce(0, { (sum, pair) in
                    sum + pair.1.dataSource.count
                }) ?? 0)
        }
    }
    func seasonsAreaIndexPaths(tag: Int) -> [IndexPath]{
        var indexPaths = [IndexPath]()
        var row = seasonsAreaStartCell
        if tag == -1{
            for s in seasonsAreaData?.items ?? []{
                indexPaths.append(IndexPath(row: row, section: 0))
                row += 1
                for _ in s.1.dataSource{
                    indexPaths.append(IndexPath(row: row, section: 0))
                    row += 1
                }
            }
        }
        else{
            for s in seasonsAreaData?.dataSource[..<tag] ?? []{
                row += 1
                for _ in s.1.dataSource{
                    row += 1
                }
            }
            row += 1
            for _ in seasonsAreaData?.dataSource[tag].1.items ?? [] {
                indexPaths.append(IndexPath(row: row, section: 0))
                row += 1
            }
        }
        return indexPaths
    }
}

extension TVShowDetailsViewController : UICollectionViewDelegate, UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int{
        if let _ = show{
            return seasonsAreaStartCell + seasonsAreaCount + 2 + (show?.details.count ?? 0)
        }
        else{
            return 0
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell{
        switch indexPath.row {
        case 0:
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "titleCell", for: indexPath) as? TitleCollectionViewCell, let show = self.show{
                cell.titleLabel.text = show.name
                cell.yearLabel.text = show.year
                cell.genresLabel.text = show.genres.flatMap({ (g) -> String? in
                    g.name
                }).joined(separator: ", ")
                cell.heartLabel.text = show.rating
                cell.lengthLabel.text = show.episodeRunTime.flatMap { "\($0)m" }.joined(separator: ", ")
                cell.starLabel.text = "Not available"
                
                cell.imageView.alpha = 0
                ImageCacheManager.getImageInBackground(url: URL(string: show.imageUrl), onComplete: { (image) in
                    cell.imageView.image = image
                    UIView.animate(withDuration: 0.2) {
                        cell.imageView.alpha = 1
                    }
                })
                
                return cell
            }
            
        case 1:
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "plotCell", for: indexPath) as? PlotCollectionViewCell, let show = show{
                cell.sectionTitleLabel.text = "Plot"
                cell.textView.text = show.overview
                return cell
            }
            
        case 2:
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "sectionMEGACell", for: indexPath) as? SectionCollectionViewCell{
                cell.label.text = "Seasons"
                
                let transform = (seasonsAreaData?.hidden ?? true) ? CGFloat.pi : 0
                cell.hideButton.transform = CGAffineTransform(rotationAngle: transform)
                cell.hideButton.transform = CGAffineTransform(rotationAngle: CGFloat.pi)
                cell.hideButton.tag = -1
                cell.hideButton.removeTarget(nil, action: nil, for: .allEvents)
                cell.hideButton.addTarget(self, action: #selector(hideButtonPressed(_:)), for: .touchUpInside)
                return cell
            }
        case seasonsAreaStartCell..<seasonsAreaCount+seasonsAreaStartCell:
            var index = indexPath.row - seasonsAreaStartCell
            var season = 0
            var episode = -1
            for s in seasonsAreaData?.dataSource ?? [] {
                if index > s.1.dataSource.count {
                    index -= s.1.dataSource.count+1
                    season += 1
                    episode = -1
                }
                else{
                    episode = -1 + index
                    break
                }
            }
            
            if episode == -1{
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "subsectionCell", for: indexPath) as? SubsectionCollectionViewCell else {return UICollectionViewCell() }
                
                cell.label.text = seasonsAreaData?.dataSource[season].0.name
                
                let transform = (seasonsAreaData?.dataSource[season].1.hidden ?? true) ? CGFloat.pi : 0
                cell.hideButton.transform = CGAffineTransform(rotationAngle: transform)
                cell.hideButton.tag = season
                cell.hideButton.removeTarget(nil, action: nil, for: .allEvents)
                cell.hideButton.addTarget(self, action: #selector(hideButtonPressed(_:)), for: .touchUpInside)
                
                return cell
            }
            else{
                guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "episodeCell", for: indexPath) as? EpisodeCell else {return UICollectionViewCell() }
                
                if let item = seasonsAreaData?.dataSource[season].1.dataSource[episode] {
                    cell.episodeNumberLabel.text = "Episode \(item.episodeNumber)"
                    cell.titleLabel.text = item.name
                    cell.airDateLabel.text = item.dateString(format: "dd.mm.yyyy")
                }               
                
                return cell
            }
        case seasonsAreaStartCell+seasonsAreaCount:
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "peopleCell", for: indexPath) as? PeopleCollectionViewCell{
                
                cell.sectionTitleLabel.text = "Cast"
                
                if let show = show{
                    cell.people = show.cast
                }
                
                return cell
            }
            
        case seasonsAreaStartCell+seasonsAreaCount + 1:
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "peopleCell", for: indexPath) as? PeopleCollectionViewCell{
                
                cell.sectionTitleLabel.text = "Crew"
                
                if let show = show{
                    cell.people = show.crew
                }
                return cell
            }
        case (seasonsAreaStartCell+seasonsAreaCount + 2)..<((seasonsAreaStartCell+seasonsAreaCount + 2)+(show?.details.count ?? 0)):
            if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "detailCell", for: indexPath) as? DetailCollectionViewCell{
                if let details = show?.details{
                    cell.nameLabel.text = details[indexPath.row - (seasonsAreaStartCell+seasonsAreaCount + 2)].0
                    cell.valueLabel.text = details[indexPath.row - (seasonsAreaStartCell+seasonsAreaCount + 2)].1
                }
                return cell
            }
            
        default:
            return UICollectionViewCell()
        }
        return UICollectionViewCell()
    }
    
    @objc func hideButtonPressed(_ sender: Any){
        if let sender = sender as? UIButton{
            guard let seasonsAreaData = seasonsAreaData else {return}
            let tag = sender.tag
            let ip = seasonsAreaIndexPaths(tag: tag)
            switch tag{
            case -1:
                if seasonsAreaData.hidden{
                    seasonsAreaData.toggle()
                    collectionView.insertItems(at: ip)
                }
                else{
                    seasonsAreaData.toggle()
                    collectionView.deleteItems(at: ip)
                }
                UIView.animate(withDuration: 0.25){
                    sender.transform = sender.transform.rotated(by: CGFloat.pi)
                }
            default:
                if tag >= 0 && tag < (seasonsAreaData.dataSource.count){
                    if seasonsAreaData.dataSource[tag].1.hidden{
                        seasonsAreaData.dataSource[tag].1.toggle()
                        collectionView.insertItems(at: ip)
                    }
                    else{
                        seasonsAreaData.dataSource[tag].1.toggle()
                        collectionView.deleteItems(at: ip)
                    }
                    UIView.animate(withDuration: 0.25){
                        sender.transform = sender.transform.rotated(by: CGFloat.pi)
                    }
                }
            }
        }
    }
}
