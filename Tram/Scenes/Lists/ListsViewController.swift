//
//  ListsViewController.swift
//  Tram
//
//  Created by Roman Abuzyarov on 27.02.2018.
//  Copyright (c) 2018 Tram, inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListsDisplayLogic: class
{
    func displayWatchlist(viewModel: Lists.Watchlist.ViewModel)
    func displayWatched(viewModel: Lists.Watched.ViewModel)
}

class ListsViewController: UICollectionViewController, ListsDisplayLogic
{
    var interactor: ListsBusinessLogic?
    var router: (NSObjectProtocol & ListsRoutingLogic & ListsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListsInteractor()
        let presenter = ListsPresenter()
        let router = ListsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        self.collectionView?.register(UINib(nibName: "MovieCollectionCell", bundle: nil), forCellWithReuseIdentifier: "movieCell")
        self.collectionView?.register(UINib(nibName: "ListHeaderCollectionReusableView", bundle: nil), forSupplementaryViewOfKind: UICollectionElementKindSectionHeader, withReuseIdentifier: "sectionHeader")
        
        if let flowLayout = collectionView?.collectionViewLayout as? UICollectionViewFlowLayout {
            flowLayout.estimatedItemSize = CGSize(width: (self.collectionView?.frame.width)!-(8*2), height: 100)
            flowLayout.headerReferenceSize = CGSize(width: (self.collectionView?.frame.width)!-(8*2), height: 50)
        }
    }
    
    override func viewWillAppear(_ animated: Bool) {
        loadWatchlist()
        loadWatched()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    enum SectionIndex: Int{
        case Watchlist = 0
        case Watched = 1
    }
    
    var watchlist: [Movie]?
    var watchlistStash: [Movie]?
    var watched: [Movie]?
    var watchedStash: [Movie]?
    var watchlistHidden = false
    var watchedHidden = false
    var watchlistDataSource: [Movie]{
        get{
            return watchlist ?? watchlistStash ?? []
        }
    }
    var watchedDataSource: [Movie]{
        get{
            return watched ?? watchedStash ?? []
        }
    }
    
    func loadWatchlist()
    {
        let request = Lists.Watchlist.Request()
        interactor?.loadWatchlist(request: request)
    }
    
    func loadWatched()
    {
        let request = Lists.Watched.Request()
        interactor?.loadWatched(request: request)
    }
    
    func displayWatchlist(viewModel: Lists.Watchlist.ViewModel)
    {
        if watchlistHidden{
            self.watchlistStash = viewModel.watchlist
            self.watchlist = nil
        }
        else{
            self.watchlist = viewModel.watchlist
            self.watchlistStash = nil
        }
        
        self.collectionView?.reloadData()
    }
    
    func displayWatched(viewModel: Lists.Watched.ViewModel) {
        if watchedHidden{
            self.watchedStash = viewModel.watched
            self.watched = nil
        }
        else{
            self.watched = viewModel.watched
            self.watchedStash = nil
        }
        
        self.collectionView?.reloadData()
    }
    
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 2
    }
    
    
    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        switch section {
        case SectionIndex.Watchlist.rawValue:
            return watchlist?.count ?? 0
        case SectionIndex.Watched.rawValue:
            return watched?.count ?? 0
        default:
            return 0
        }
    }
    
    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "movieCell", for: indexPath) as! MovieCollectionViewCell
        var item: Movie?
        switch indexPath.section{
        case SectionIndex.Watchlist.rawValue:
            item = watchlistDataSource[indexPath.row]
        case SectionIndex.Watched.rawValue:
            item = watchedDataSource[indexPath.row]
        default:
            ()
        }
        if let item = item{
            cell.titleLabel.text = item.title
            cell.imageView.setImageInBackground(url: URL(string: (item.imageUrl)))
            cell.ratingLabel.text = item.rating
            cell.yearLabel.text = item.year
            cell.starsLabel.text = "Not available"
        }
        return cell
    }
    
    override func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: "sectionHeader", for: indexPath) as! ListHeaderCollectionReusableView
        header.hideButton.removeTarget(self, action: #selector(toggleWatchlist(_:)), for: .touchUpInside)
        header.hideButton.removeTarget(self, action: #selector(toggleWatched(_:)), for: .touchUpInside)
        switch indexPath.section {
        case SectionIndex.Watchlist.rawValue:
            header.sectionTitle.text = "Watchlist"
            header.hideButton.addTarget(self, action: #selector(toggleWatchlist(_:)), for: .touchUpInside)
        case SectionIndex.Watched.rawValue:
            header.sectionTitle.text = "Watched"
            header.hideButton.addTarget(self, action: #selector(toggleWatched(_:)), for: .touchUpInside)
        default:
            ()
        }
        
        var transform: CGFloat?
        switch indexPath.section {
        case SectionIndex.Watchlist.rawValue:
            transform = watchlistHidden ? CGFloat.pi : 0
        case SectionIndex.Watched.rawValue:
            transform = watchedHidden ? CGFloat.pi : 0
        default:
            ()
        }
        if let transform = transform{
            header.hideButton.transform = CGAffineTransform(rotationAngle: transform)
        }
        
        return header
    }
    
    @objc func toggleWatchlist(_ sender: Any){
        print("watchlist")
        if let button = sender as? UIButton{
            var indexPaths: [IndexPath] = []
            for i in 0..<watchlistDataSource.count{
                indexPaths.append(IndexPath(row: i, section: SectionIndex.Watchlist.rawValue))
            }
            
            if watchlistHidden{
                watchlist = watchlistStash
                watchlistStash = nil
                self.collectionView?.insertItems(at: indexPaths)
            }
            else{
                watchlistStash = watchlist
                watchlist = nil
                self.collectionView?.deleteItems(at: indexPaths)
            }
            
            watchlistHidden = !watchlistHidden
            
            UIView.animate(withDuration: 0.25) { () -> Void in
                button.transform = button.transform.rotated(by: CGFloat.pi)
            }
        }
    }
    
    @objc func toggleWatched(_ sender: Any){
        print("watched")
        if let button = sender as? UIButton{
            var indexPaths: [IndexPath] = []
            for i in 0..<watchedDataSource.count{
                indexPaths.append(IndexPath(row: i, section: SectionIndex.Watched.rawValue))
            }
            
            if watchedHidden{
                watched = watchedStash
                watchedStash = nil
                self.collectionView?.insertItems(at: indexPaths)
            }
            else{
                watchedStash = watched
                watched = nil
                self.collectionView?.deleteItems(at: indexPaths)
            }
            
            watchedHidden = !watchedHidden
            
            UIView.animate(withDuration: 0.25) { () -> Void in
                button.transform = button.transform.rotated(by: CGFloat.pi)
            }
        }
    }
}
